// Code generated by RedSock CLI.
// DO EDIT, DON'T DELETE THIS FILE.

package app

import (
	"context"

	"github.com/Red-Sock/toolbox/closer"
	errors "github.com/Red-Sock/trace-errors"
	"github.com/godverv/makosh/pkg/makosh_be"
	"github.com/godverv/matreshka-be/pkg/matreshka_be_api"
	"github.com/sirupsen/logrus"

	"github.com/godverv/Velez/internal/clients"
	"github.com/godverv/Velez/internal/service"
	"github.com/godverv/Velez/internal/service/service_manager"
	"github.com/godverv/Velez/internal/transport/grpc"
	"github.com/godverv/Velez/pkg/velez_api"
)

type Custom struct {
	// NodeClients - hardware scanner, docker and wrappers
	NodeClients clients.NodeClients

	// Service discovery client
	MakoshClient makosh_be.MakoshBeAPIClient
	// Configuration client
	MatreshkaClient matreshka_be_api.MatreshkaBeAPIClient
	// ClusterClients - contains verv cluster's dependencies
	ClusterClients clients.ClusterClients

	// Services - contains business logic services
	Services service.Services
	// Api implementation
	GrpcImpl *grpc.Impl
}

func (c *Custom) Init(a *App) (err error) {
	c.NodeClients, err = clients.NewNodeClientsContainer(a.Ctx, a.Cfg)
	if err != nil {
		return errors.Wrap(err, "error initializing internal clients")
	}

	err = c.setupVervNodeEnvironment()
	if err != nil {
		return errors.Wrap(err, "error setting up node environment")
	}

	err = c.initServiceDiscovery(a)
	if err != nil {
		return errors.Wrap(err, "error initializing service discovery")
	}

	err = c.initConfigurationService(a)
	if err != nil {
		return errors.Wrap(err, "error initializing configuration service")
	}

	c.ClusterClients = clients.NewClusterClientsContainer(c.MakoshClient, c.MatreshkaClient)

	c.initVelezServices(a)

	err = c.initApiServer(a)
	if err != nil {
		return errors.Wrap(err)
	}

	return nil
}

func (c *Custom) initVelezServices(a *App) {
	c.Services = service_manager.New(c.NodeClients, c.ClusterClients)

	logrus.Warn("shut down on exit is set to: ", a.Cfg.Environment.ShutDownOnExit)

	if a.Cfg.Environment.ShutDownOnExit {
		closer.Add(smerdsDropper(c.Services))
	}
}

func (c *Custom) initApiServer(a *App) error {
	c.GrpcImpl = grpc.NewImpl(a.Cfg, c.Services)

	a.Server.AddGrpcServer(c.GrpcImpl)
	//a.Server.AddHttpHandler("/verv/makosh", c.ServiceDiscovery)
	// TODO ADD TO TOP SHIT
	//if !cfg.Environment.DisableAPISecurity {
	//	opts = append(opts, security.GrpcInterceptor(clnts.SecurityManager()))
	//}

	return nil
}

func smerdsDropper(manager service.Services) func() error {
	return func() error {
		logrus.Infof("ShutDownOnExit env variable is set to TRUE. Dropping launched smerds")
		logrus.Infof("Listing launched smerds")
		ctx := context.Background()

		smerds, err := manager.ListSmerds(ctx, &velez_api.ListSmerds_Request{})
		if err != nil {
			return err
		}

		names := make([]string, 0, len(smerds.Smerds))

		for _, sm := range smerds.Smerds {
			names = append(names, sm.Name)
		}

		logrus.Infof("%d smerds is active. %v", len(smerds.Smerds), names)

		dropReq := &velez_api.DropSmerd_Request{
			Uuids: make([]string, len(smerds.Smerds)),
		}

		for i := range smerds.Smerds {
			dropReq.Uuids[i] = smerds.Smerds[i].Uuid
		}

		logrus.Infof("Dropping %d smerds", len(smerds.Smerds))

		dropSmerds, err := manager.DropSmerds(ctx, dropReq)
		if err != nil {
			return err
		}

		logrus.Infof("%d smerds dropped successfully", len(dropSmerds.Successful))
		if len(dropSmerds.Successful) != 0 {
			logrus.Infof("Dropped smerds: %v", dropSmerds.Successful)
		}

		if len(dropSmerds.Failed) != 0 {
			logrus.Errorf("%d smerds failed to drop", len(dropSmerds.Failed))
			for _, f := range dropSmerds.Failed {
				logrus.Errorf("error dropping %s. Cause: %s", f.Uuid, f.Cause)
			}
		}

		return nil
	}
}
