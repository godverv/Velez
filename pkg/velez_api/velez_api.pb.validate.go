// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grpc/velez_api.proto

package velez_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Version) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VersionMultiError, or nil if none found.
func (m *Version) ValidateAll() error {
	return m.validate(true)
}

func (m *Version) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionMultiError(errors)
	}

	return nil
}

// VersionMultiError is an error wrapping multiple validation errors returned
// by Version.ValidateAll() if the designated constraints aren't met.
type VersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionMultiError) AllErrors() []error { return m }

// VersionValidationError is the validation error returned by Version.Validate
// if the designated constraints aren't met.
type VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionValidationError) ErrorName() string { return "VersionValidationError" }

// Error satisfies the builtin error interface
func (e VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionValidationError{}

// Validate checks the field values on Port with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Port) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Port with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PortMultiError, or nil if none found.
func (m *Port) ValidateAll() error {
	return m.validate(true)
}

func (m *Port) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServicePortNumber

	// no validation rules for Protocol

	if m.ExposedTo != nil {
		// no validation rules for ExposedTo
	}

	if len(errors) > 0 {
		return PortMultiError(errors)
	}

	return nil
}

// PortMultiError is an error wrapping multiple validation errors returned by
// Port.ValidateAll() if the designated constraints aren't met.
type PortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortMultiError) AllErrors() []error { return m }

// PortValidationError is the validation error returned by Port.Validate if the
// designated constraints aren't met.
type PortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortValidationError) ErrorName() string { return "PortValidationError" }

// Error satisfies the builtin error interface
func (e PortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortValidationError{}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VolumeMultiError, or nil if none found.
func (m *Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VolumeName

	// no validation rules for ContainerPath

	if len(errors) > 0 {
		return VolumeMultiError(errors)
	}

	return nil
}

// VolumeMultiError is an error wrapping multiple validation errors returned by
// Volume.ValidateAll() if the designated constraints aren't met.
type VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeMultiError) AllErrors() []error { return m }

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}

// Validate checks the field values on NetworkBind with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetworkBind) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkBind with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetworkBindMultiError, or
// nil if none found.
func (m *NetworkBind) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkBind) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NetworkName

	if len(errors) > 0 {
		return NetworkBindMultiError(errors)
	}

	return nil
}

// NetworkBindMultiError is an error wrapping multiple validation errors
// returned by NetworkBind.ValidateAll() if the designated constraints aren't met.
type NetworkBindMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkBindMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkBindMultiError) AllErrors() []error { return m }

// NetworkBindValidationError is the validation error returned by
// NetworkBind.Validate if the designated constraints aren't met.
type NetworkBindValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkBindValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkBindValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkBindValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkBindValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkBindValidationError) ErrorName() string { return "NetworkBindValidationError" }

// Error satisfies the builtin error interface
func (e NetworkBindValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkBind.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkBindValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkBindValidationError{}

// Validate checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ImageMultiError, or nil if none found.
func (m *Image) ValidateAll() error {
	return m.validate(true)
}

func (m *Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Labels

	if len(errors) > 0 {
		return ImageMultiError(errors)
	}

	return nil
}

// ImageMultiError is an error wrapping multiple validation errors returned by
// Image.ValidateAll() if the designated constraints aren't met.
type ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMultiError) AllErrors() []error { return m }

// ImageValidationError is the validation error returned by Image.Validate if
// the designated constraints aren't met.
type ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageValidationError) ErrorName() string { return "ImageValidationError" }

// Error satisfies the builtin error interface
func (e ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageValidationError{}

// Validate checks the field values on Smerd with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Smerd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Smerd with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SmerdMultiError, or nil if none found.
func (m *Smerd) ValidateAll() error {
	return m.validate(true)
}

func (m *Smerd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for ImageName

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SmerdValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SmerdValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SmerdValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SmerdValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SmerdValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SmerdValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SmerdValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SmerdValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SmerdValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SmerdValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SmerdValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SmerdValidationError{
					field:  fmt.Sprintf("Networks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return SmerdMultiError(errors)
	}

	return nil
}

// SmerdMultiError is an error wrapping multiple validation errors returned by
// Smerd.ValidateAll() if the designated constraints aren't met.
type SmerdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmerdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmerdMultiError) AllErrors() []error { return m }

// SmerdValidationError is the validation error returned by Smerd.Validate if
// the designated constraints aren't met.
type SmerdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmerdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmerdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmerdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmerdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmerdValidationError) ErrorName() string { return "SmerdValidationError" }

// Error satisfies the builtin error interface
func (e SmerdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSmerd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmerdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmerdValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on CreateSmerd with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateSmerd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSmerd with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateSmerdMultiError, or
// nil if none found.
func (m *CreateSmerd) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSmerd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSmerdMultiError(errors)
	}

	return nil
}

// CreateSmerdMultiError is an error wrapping multiple validation errors
// returned by CreateSmerd.ValidateAll() if the designated constraints aren't met.
type CreateSmerdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSmerdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSmerdMultiError) AllErrors() []error { return m }

// CreateSmerdValidationError is the validation error returned by
// CreateSmerd.Validate if the designated constraints aren't met.
type CreateSmerdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSmerdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSmerdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSmerdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSmerdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSmerdValidationError) ErrorName() string { return "CreateSmerdValidationError" }

// Error satisfies the builtin error interface
func (e CreateSmerdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSmerd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSmerdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSmerdValidationError{}

// Validate checks the field values on ListSmerds with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSmerds) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSmerds with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSmerdsMultiError, or
// nil if none found.
func (m *ListSmerds) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSmerds) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSmerdsMultiError(errors)
	}

	return nil
}

// ListSmerdsMultiError is an error wrapping multiple validation errors
// returned by ListSmerds.ValidateAll() if the designated constraints aren't met.
type ListSmerdsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSmerdsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSmerdsMultiError) AllErrors() []error { return m }

// ListSmerdsValidationError is the validation error returned by
// ListSmerds.Validate if the designated constraints aren't met.
type ListSmerdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSmerdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSmerdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSmerdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSmerdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSmerdsValidationError) ErrorName() string { return "ListSmerdsValidationError" }

// Error satisfies the builtin error interface
func (e ListSmerdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSmerds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSmerdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSmerdsValidationError{}

// Validate checks the field values on DropSmerd with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DropSmerd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DropSmerd with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DropSmerdMultiError, or nil
// if none found.
func (m *DropSmerd) ValidateAll() error {
	return m.validate(true)
}

func (m *DropSmerd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DropSmerdMultiError(errors)
	}

	return nil
}

// DropSmerdMultiError is an error wrapping multiple validation errors returned
// by DropSmerd.ValidateAll() if the designated constraints aren't met.
type DropSmerdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DropSmerdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DropSmerdMultiError) AllErrors() []error { return m }

// DropSmerdValidationError is the validation error returned by
// DropSmerd.Validate if the designated constraints aren't met.
type DropSmerdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropSmerdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropSmerdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropSmerdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropSmerdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropSmerdValidationError) ErrorName() string { return "DropSmerdValidationError" }

// Error satisfies the builtin error interface
func (e DropSmerdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropSmerd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropSmerdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropSmerdValidationError{}

// Validate checks the field values on GetHardware with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHardware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHardware with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHardwareMultiError, or
// nil if none found.
func (m *GetHardware) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHardware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetHardwareMultiError(errors)
	}

	return nil
}

// GetHardwareMultiError is an error wrapping multiple validation errors
// returned by GetHardware.ValidateAll() if the designated constraints aren't met.
type GetHardwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHardwareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHardwareMultiError) AllErrors() []error { return m }

// GetHardwareValidationError is the validation error returned by
// GetHardware.Validate if the designated constraints aren't met.
type GetHardwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHardwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHardwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHardwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHardwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHardwareValidationError) ErrorName() string { return "GetHardwareValidationError" }

// Error satisfies the builtin error interface
func (e GetHardwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHardware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHardwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHardwareValidationError{}

// Validate checks the field values on FetchConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FetchConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FetchConfigMultiError, or
// nil if none found.
func (m *FetchConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FetchConfigMultiError(errors)
	}

	return nil
}

// FetchConfigMultiError is an error wrapping multiple validation errors
// returned by FetchConfig.ValidateAll() if the designated constraints aren't met.
type FetchConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchConfigMultiError) AllErrors() []error { return m }

// FetchConfigValidationError is the validation error returned by
// FetchConfig.Validate if the designated constraints aren't met.
type FetchConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchConfigValidationError) ErrorName() string { return "FetchConfigValidationError" }

// Error satisfies the builtin error interface
func (e FetchConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchConfigValidationError{}

// Validate checks the field values on Version_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_RequestMultiError, or nil if none found.
func (m *Version_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Version_RequestMultiError(errors)
	}

	return nil
}

// Version_RequestMultiError is an error wrapping multiple validation errors
// returned by Version_Request.ValidateAll() if the designated constraints
// aren't met.
type Version_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_RequestMultiError) AllErrors() []error { return m }

// Version_RequestValidationError is the validation error returned by
// Version_Request.Validate if the designated constraints aren't met.
type Version_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_RequestValidationError) ErrorName() string { return "Version_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Version_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_RequestValidationError{}

// Validate checks the field values on Version_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_ResponseMultiError, or nil if none found.
func (m *Version_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return Version_ResponseMultiError(errors)
	}

	return nil
}

// Version_ResponseMultiError is an error wrapping multiple validation errors
// returned by Version_Response.ValidateAll() if the designated constraints
// aren't met.
type Version_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_ResponseMultiError) AllErrors() []error { return m }

// Version_ResponseValidationError is the validation error returned by
// Version_Response.Validate if the designated constraints aren't met.
type Version_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_ResponseValidationError) ErrorName() string { return "Version_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Version_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_ResponseValidationError{}

// Validate checks the field values on Container_Hardware with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Container_Hardware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container_Hardware with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Container_HardwareMultiError, or nil if none found.
func (m *Container_Hardware) ValidateAll() error {
	return m.validate(true)
}

func (m *Container_Hardware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CpuAmount != nil {
		// no validation rules for CpuAmount
	}

	if m.RamMb != nil {
		// no validation rules for RamMb
	}

	if m.MemorySwapMb != nil {
		// no validation rules for MemorySwapMb
	}

	if len(errors) > 0 {
		return Container_HardwareMultiError(errors)
	}

	return nil
}

// Container_HardwareMultiError is an error wrapping multiple validation errors
// returned by Container_Hardware.ValidateAll() if the designated constraints
// aren't met.
type Container_HardwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Container_HardwareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Container_HardwareMultiError) AllErrors() []error { return m }

// Container_HardwareValidationError is the validation error returned by
// Container_Hardware.Validate if the designated constraints aren't met.
type Container_HardwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Container_HardwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Container_HardwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Container_HardwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Container_HardwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Container_HardwareValidationError) ErrorName() string {
	return "Container_HardwareValidationError"
}

// Error satisfies the builtin error interface
func (e Container_HardwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer_Hardware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Container_HardwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Container_HardwareValidationError{}

// Validate checks the field values on Container_Settings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Container_Settings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container_Settings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Container_SettingsMultiError, or nil if none found.
func (m *Container_Settings) ValidateAll() error {
	return m.validate(true)
}

func (m *Container_Settings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Container_SettingsValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Container_SettingsValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Container_SettingsMultiError(errors)
	}

	return nil
}

// Container_SettingsMultiError is an error wrapping multiple validation errors
// returned by Container_Settings.ValidateAll() if the designated constraints
// aren't met.
type Container_SettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Container_SettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Container_SettingsMultiError) AllErrors() []error { return m }

// Container_SettingsValidationError is the validation error returned by
// Container_Settings.Validate if the designated constraints aren't met.
type Container_SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Container_SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Container_SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Container_SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Container_SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Container_SettingsValidationError) ErrorName() string {
	return "Container_SettingsValidationError"
}

// Error satisfies the builtin error interface
func (e Container_SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer_Settings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Container_SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Container_SettingsValidationError{}

// Validate checks the field values on Container_Healthcheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Container_Healthcheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container_Healthcheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Container_HealthcheckMultiError, or nil if none found.
func (m *Container_Healthcheck) ValidateAll() error {
	return m.validate(true)
}

func (m *Container_Healthcheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntervalSecond

	// no validation rules for Retries

	if m.Command != nil {
		// no validation rules for Command
	}

	if m.TimeoutSecond != nil {
		// no validation rules for TimeoutSecond
	}

	if len(errors) > 0 {
		return Container_HealthcheckMultiError(errors)
	}

	return nil
}

// Container_HealthcheckMultiError is an error wrapping multiple validation
// errors returned by Container_Healthcheck.ValidateAll() if the designated
// constraints aren't met.
type Container_HealthcheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Container_HealthcheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Container_HealthcheckMultiError) AllErrors() []error { return m }

// Container_HealthcheckValidationError is the validation error returned by
// Container_Healthcheck.Validate if the designated constraints aren't met.
type Container_HealthcheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Container_HealthcheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Container_HealthcheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Container_HealthcheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Container_HealthcheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Container_HealthcheckValidationError) ErrorName() string {
	return "Container_HealthcheckValidationError"
}

// Error satisfies the builtin error interface
func (e Container_HealthcheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer_Healthcheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Container_HealthcheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Container_HealthcheckValidationError{}

// Validate checks the field values on CreateSmerd_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSmerd_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSmerd_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSmerd_RequestMultiError, or nil if none found.
func (m *CreateSmerd_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSmerd_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ImageName

	// no validation rules for Env

	// no validation rules for Labels

	// no validation rules for IgnoreConfig

	// no validation rules for UseImagePorts

	if m.Hardware != nil {

		if all {
			switch v := interface{}(m.GetHardware()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Hardware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Hardware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHardware()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSmerd_RequestValidationError{
					field:  "Hardware",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Settings != nil {

		if all {
			switch v := interface{}(m.GetSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSmerd_RequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Command != nil {
		// no validation rules for Command
	}

	if m.Healthcheck != nil {

		if all {
			switch v := interface{}(m.GetHealthcheck()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Healthcheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Healthcheck",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthcheck()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSmerd_RequestValidationError{
					field:  "Healthcheck",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateSmerd_RequestMultiError(errors)
	}

	return nil
}

// CreateSmerd_RequestMultiError is an error wrapping multiple validation
// errors returned by CreateSmerd_Request.ValidateAll() if the designated
// constraints aren't met.
type CreateSmerd_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSmerd_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSmerd_RequestMultiError) AllErrors() []error { return m }

// CreateSmerd_RequestValidationError is the validation error returned by
// CreateSmerd_Request.Validate if the designated constraints aren't met.
type CreateSmerd_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSmerd_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSmerd_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSmerd_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSmerd_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSmerd_RequestValidationError) ErrorName() string {
	return "CreateSmerd_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSmerd_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSmerd_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSmerd_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSmerd_RequestValidationError{}

// Validate checks the field values on ListSmerds_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSmerds_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSmerds_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSmerds_RequestMultiError, or nil if none found.
func (m *ListSmerds_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSmerds_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return ListSmerds_RequestMultiError(errors)
	}

	return nil
}

// ListSmerds_RequestMultiError is an error wrapping multiple validation errors
// returned by ListSmerds_Request.ValidateAll() if the designated constraints
// aren't met.
type ListSmerds_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSmerds_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSmerds_RequestMultiError) AllErrors() []error { return m }

// ListSmerds_RequestValidationError is the validation error returned by
// ListSmerds_Request.Validate if the designated constraints aren't met.
type ListSmerds_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSmerds_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSmerds_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSmerds_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSmerds_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSmerds_RequestValidationError) ErrorName() string {
	return "ListSmerds_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSmerds_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSmerds_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSmerds_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSmerds_RequestValidationError{}

// Validate checks the field values on ListSmerds_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSmerds_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSmerds_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSmerds_ResponseMultiError, or nil if none found.
func (m *ListSmerds_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSmerds_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSmerds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSmerds_ResponseValidationError{
						field:  fmt.Sprintf("Smerds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSmerds_ResponseValidationError{
						field:  fmt.Sprintf("Smerds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSmerds_ResponseValidationError{
					field:  fmt.Sprintf("Smerds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSmerds_ResponseMultiError(errors)
	}

	return nil
}

// ListSmerds_ResponseMultiError is an error wrapping multiple validation
// errors returned by ListSmerds_Response.ValidateAll() if the designated
// constraints aren't met.
type ListSmerds_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSmerds_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSmerds_ResponseMultiError) AllErrors() []error { return m }

// ListSmerds_ResponseValidationError is the validation error returned by
// ListSmerds_Response.Validate if the designated constraints aren't met.
type ListSmerds_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSmerds_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSmerds_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSmerds_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSmerds_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSmerds_ResponseValidationError) ErrorName() string {
	return "ListSmerds_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSmerds_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSmerds_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSmerds_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSmerds_ResponseValidationError{}

// Validate checks the field values on DropSmerd_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DropSmerd_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DropSmerd_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DropSmerd_RequestMultiError, or nil if none found.
func (m *DropSmerd_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DropSmerd_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DropSmerd_RequestMultiError(errors)
	}

	return nil
}

// DropSmerd_RequestMultiError is an error wrapping multiple validation errors
// returned by DropSmerd_Request.ValidateAll() if the designated constraints
// aren't met.
type DropSmerd_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DropSmerd_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DropSmerd_RequestMultiError) AllErrors() []error { return m }

// DropSmerd_RequestValidationError is the validation error returned by
// DropSmerd_Request.Validate if the designated constraints aren't met.
type DropSmerd_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropSmerd_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropSmerd_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropSmerd_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropSmerd_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropSmerd_RequestValidationError) ErrorName() string {
	return "DropSmerd_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DropSmerd_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropSmerd_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropSmerd_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropSmerd_RequestValidationError{}

// Validate checks the field values on DropSmerd_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DropSmerd_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DropSmerd_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DropSmerd_ResponseMultiError, or nil if none found.
func (m *DropSmerd_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DropSmerd_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFailed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DropSmerd_ResponseValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DropSmerd_ResponseValidationError{
						field:  fmt.Sprintf("Failed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DropSmerd_ResponseValidationError{
					field:  fmt.Sprintf("Failed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DropSmerd_ResponseMultiError(errors)
	}

	return nil
}

// DropSmerd_ResponseMultiError is an error wrapping multiple validation errors
// returned by DropSmerd_Response.ValidateAll() if the designated constraints
// aren't met.
type DropSmerd_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DropSmerd_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DropSmerd_ResponseMultiError) AllErrors() []error { return m }

// DropSmerd_ResponseValidationError is the validation error returned by
// DropSmerd_Response.Validate if the designated constraints aren't met.
type DropSmerd_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropSmerd_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropSmerd_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropSmerd_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropSmerd_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropSmerd_ResponseValidationError) ErrorName() string {
	return "DropSmerd_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DropSmerd_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropSmerd_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropSmerd_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropSmerd_ResponseValidationError{}

// Validate checks the field values on DropSmerd_Response_Error with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DropSmerd_Response_Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DropSmerd_Response_Error with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DropSmerd_Response_ErrorMultiError, or nil if none found.
func (m *DropSmerd_Response_Error) ValidateAll() error {
	return m.validate(true)
}

func (m *DropSmerd_Response_Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Cause

	if len(errors) > 0 {
		return DropSmerd_Response_ErrorMultiError(errors)
	}

	return nil
}

// DropSmerd_Response_ErrorMultiError is an error wrapping multiple validation
// errors returned by DropSmerd_Response_Error.ValidateAll() if the designated
// constraints aren't met.
type DropSmerd_Response_ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DropSmerd_Response_ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DropSmerd_Response_ErrorMultiError) AllErrors() []error { return m }

// DropSmerd_Response_ErrorValidationError is the validation error returned by
// DropSmerd_Response_Error.Validate if the designated constraints aren't met.
type DropSmerd_Response_ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DropSmerd_Response_ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DropSmerd_Response_ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DropSmerd_Response_ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DropSmerd_Response_ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DropSmerd_Response_ErrorValidationError) ErrorName() string {
	return "DropSmerd_Response_ErrorValidationError"
}

// Error satisfies the builtin error interface
func (e DropSmerd_Response_ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDropSmerd_Response_Error.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DropSmerd_Response_ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DropSmerd_Response_ErrorValidationError{}

// Validate checks the field values on GetHardware_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHardware_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHardware_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHardware_RequestMultiError, or nil if none found.
func (m *GetHardware_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHardware_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetHardware_RequestMultiError(errors)
	}

	return nil
}

// GetHardware_RequestMultiError is an error wrapping multiple validation
// errors returned by GetHardware_Request.ValidateAll() if the designated
// constraints aren't met.
type GetHardware_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHardware_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHardware_RequestMultiError) AllErrors() []error { return m }

// GetHardware_RequestValidationError is the validation error returned by
// GetHardware_Request.Validate if the designated constraints aren't met.
type GetHardware_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHardware_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHardware_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHardware_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHardware_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHardware_RequestValidationError) ErrorName() string {
	return "GetHardware_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHardware_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHardware_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHardware_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHardware_RequestValidationError{}

// Validate checks the field values on GetHardware_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHardware_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHardware_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHardware_ResponseMultiError, or nil if none found.
func (m *GetHardware_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHardware_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHardware_ResponseValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHardware_ResponseValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHardware_ResponseValidationError{
				field:  "Cpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiskMem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHardware_ResponseValidationError{
					field:  "DiskMem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHardware_ResponseValidationError{
					field:  "DiskMem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiskMem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHardware_ResponseValidationError{
				field:  "DiskMem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHardware_ResponseValidationError{
					field:  "Ram",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHardware_ResponseValidationError{
					field:  "Ram",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHardware_ResponseValidationError{
				field:  "Ram",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHardware_ResponseMultiError(errors)
	}

	return nil
}

// GetHardware_ResponseMultiError is an error wrapping multiple validation
// errors returned by GetHardware_Response.ValidateAll() if the designated
// constraints aren't met.
type GetHardware_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHardware_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHardware_ResponseMultiError) AllErrors() []error { return m }

// GetHardware_ResponseValidationError is the validation error returned by
// GetHardware_Response.Validate if the designated constraints aren't met.
type GetHardware_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHardware_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHardware_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHardware_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHardware_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHardware_ResponseValidationError) ErrorName() string {
	return "GetHardware_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHardware_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHardware_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHardware_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHardware_ResponseValidationError{}

// Validate checks the field values on GetHardware_Response_Value with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHardware_Response_Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHardware_Response_Value with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHardware_Response_ValueMultiError, or nil if none found.
func (m *GetHardware_Response_Value) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHardware_Response_Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Err

	if len(errors) > 0 {
		return GetHardware_Response_ValueMultiError(errors)
	}

	return nil
}

// GetHardware_Response_ValueMultiError is an error wrapping multiple
// validation errors returned by GetHardware_Response_Value.ValidateAll() if
// the designated constraints aren't met.
type GetHardware_Response_ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHardware_Response_ValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHardware_Response_ValueMultiError) AllErrors() []error { return m }

// GetHardware_Response_ValueValidationError is the validation error returned
// by GetHardware_Response_Value.Validate if the designated constraints aren't met.
type GetHardware_Response_ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHardware_Response_ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHardware_Response_ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHardware_Response_ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHardware_Response_ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHardware_Response_ValueValidationError) ErrorName() string {
	return "GetHardware_Response_ValueValidationError"
}

// Error satisfies the builtin error interface
func (e GetHardware_Response_ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHardware_Response_Value.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHardware_Response_ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHardware_Response_ValueValidationError{}

// Validate checks the field values on FetchConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchConfig_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchConfig_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchConfig_RequestMultiError, or nil if none found.
func (m *FetchConfig_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchConfig_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageName

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return FetchConfig_RequestMultiError(errors)
	}

	return nil
}

// FetchConfig_RequestMultiError is an error wrapping multiple validation
// errors returned by FetchConfig_Request.ValidateAll() if the designated
// constraints aren't met.
type FetchConfig_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchConfig_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchConfig_RequestMultiError) AllErrors() []error { return m }

// FetchConfig_RequestValidationError is the validation error returned by
// FetchConfig_Request.Validate if the designated constraints aren't met.
type FetchConfig_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchConfig_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchConfig_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchConfig_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchConfig_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchConfig_RequestValidationError) ErrorName() string {
	return "FetchConfig_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchConfig_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchConfig_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchConfig_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchConfig_RequestValidationError{}

// Validate checks the field values on FetchConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchConfig_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchConfig_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchConfig_ResponseMultiError, or nil if none found.
func (m *FetchConfig_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchConfig_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return FetchConfig_ResponseMultiError(errors)
	}

	return nil
}

// FetchConfig_ResponseMultiError is an error wrapping multiple validation
// errors returned by FetchConfig_Response.ValidateAll() if the designated
// constraints aren't met.
type FetchConfig_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchConfig_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchConfig_ResponseMultiError) AllErrors() []error { return m }

// FetchConfig_ResponseValidationError is the validation error returned by
// FetchConfig_Response.Validate if the designated constraints aren't met.
type FetchConfig_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchConfig_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchConfig_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchConfig_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchConfig_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchConfig_ResponseValidationError) ErrorName() string {
	return "FetchConfig_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchConfig_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchConfig_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchConfig_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchConfig_ResponseValidationError{}
