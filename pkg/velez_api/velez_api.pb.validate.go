// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grpc/velez_api.proto

package velez_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Version) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VersionMultiError, or nil if none found.
func (m *Version) ValidateAll() error {
	return m.validate(true)
}

func (m *Version) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionMultiError(errors)
	}

	return nil
}

// VersionMultiError is an error wrapping multiple validation errors returned
// by Version.ValidateAll() if the designated constraints aren't met.
type VersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionMultiError) AllErrors() []error { return m }

// VersionValidationError is the validation error returned by Version.Validate
// if the designated constraints aren't met.
type VersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionValidationError) ErrorName() string { return "VersionValidationError" }

// Error satisfies the builtin error interface
func (e VersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionValidationError{}

// Validate checks the field values on PortBindings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PortBindings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortBindings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PortBindingsMultiError, or
// nil if none found.
func (m *PortBindings) ValidateAll() error {
	return m.validate(true)
}

func (m *PortBindings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Container

	// no validation rules for Protoc

	if len(errors) > 0 {
		return PortBindingsMultiError(errors)
	}

	return nil
}

// PortBindingsMultiError is an error wrapping multiple validation errors
// returned by PortBindings.ValidateAll() if the designated constraints aren't met.
type PortBindingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortBindingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortBindingsMultiError) AllErrors() []error { return m }

// PortBindingsValidationError is the validation error returned by
// PortBindings.Validate if the designated constraints aren't met.
type PortBindingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortBindingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortBindingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortBindingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortBindingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortBindingsValidationError) ErrorName() string { return "PortBindingsValidationError" }

// Error satisfies the builtin error interface
func (e PortBindingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortBindings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortBindingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortBindingsValidationError{}

// Validate checks the field values on VolumeBindings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VolumeBindings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VolumeBindings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VolumeBindingsMultiError,
// or nil if none found.
func (m *VolumeBindings) ValidateAll() error {
	return m.validate(true)
}

func (m *VolumeBindings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Container

	if len(errors) > 0 {
		return VolumeBindingsMultiError(errors)
	}

	return nil
}

// VolumeBindingsMultiError is an error wrapping multiple validation errors
// returned by VolumeBindings.ValidateAll() if the designated constraints
// aren't met.
type VolumeBindingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeBindingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeBindingsMultiError) AllErrors() []error { return m }

// VolumeBindingsValidationError is the validation error returned by
// VolumeBindings.Validate if the designated constraints aren't met.
type VolumeBindingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeBindingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeBindingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeBindingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeBindingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeBindingsValidationError) ErrorName() string { return "VolumeBindingsValidationError" }

// Error satisfies the builtin error interface
func (e VolumeBindingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeBindings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeBindingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeBindingsValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on CreateSmerd with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateSmerd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSmerd with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateSmerdMultiError, or
// nil if none found.
func (m *CreateSmerd) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSmerd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSmerdMultiError(errors)
	}

	return nil
}

// CreateSmerdMultiError is an error wrapping multiple validation errors
// returned by CreateSmerd.ValidateAll() if the designated constraints aren't met.
type CreateSmerdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSmerdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSmerdMultiError) AllErrors() []error { return m }

// CreateSmerdValidationError is the validation error returned by
// CreateSmerd.Validate if the designated constraints aren't met.
type CreateSmerdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSmerdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSmerdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSmerdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSmerdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSmerdValidationError) ErrorName() string { return "CreateSmerdValidationError" }

// Error satisfies the builtin error interface
func (e CreateSmerdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSmerd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSmerdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSmerdValidationError{}

// Validate checks the field values on Version_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_RequestMultiError, or nil if none found.
func (m *Version_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Version_RequestMultiError(errors)
	}

	return nil
}

// Version_RequestMultiError is an error wrapping multiple validation errors
// returned by Version_Request.ValidateAll() if the designated constraints
// aren't met.
type Version_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_RequestMultiError) AllErrors() []error { return m }

// Version_RequestValidationError is the validation error returned by
// Version_Request.Validate if the designated constraints aren't met.
type Version_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_RequestValidationError) ErrorName() string { return "Version_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Version_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_RequestValidationError{}

// Validate checks the field values on Version_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Version_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Version_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Version_ResponseMultiError, or nil if none found.
func (m *Version_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Version_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return Version_ResponseMultiError(errors)
	}

	return nil
}

// Version_ResponseMultiError is an error wrapping multiple validation errors
// returned by Version_Response.ValidateAll() if the designated constraints
// aren't met.
type Version_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Version_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Version_ResponseMultiError) AllErrors() []error { return m }

// Version_ResponseValidationError is the validation error returned by
// Version_Response.Validate if the designated constraints aren't met.
type Version_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Version_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Version_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Version_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Version_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Version_ResponseValidationError) ErrorName() string { return "Version_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Version_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersion_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Version_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Version_ResponseValidationError{}

// Validate checks the field values on Container_Hardware with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Container_Hardware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container_Hardware with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Container_HardwareMultiError, or nil if none found.
func (m *Container_Hardware) ValidateAll() error {
	return m.validate(true)
}

func (m *Container_Hardware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CpuAmount != nil {
		// no validation rules for CpuAmount
	}

	if m.RamMb != nil {
		// no validation rules for RamMb
	}

	if m.MemorySwapMb != nil {
		// no validation rules for MemorySwapMb
	}

	if len(errors) > 0 {
		return Container_HardwareMultiError(errors)
	}

	return nil
}

// Container_HardwareMultiError is an error wrapping multiple validation errors
// returned by Container_Hardware.ValidateAll() if the designated constraints
// aren't met.
type Container_HardwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Container_HardwareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Container_HardwareMultiError) AllErrors() []error { return m }

// Container_HardwareValidationError is the validation error returned by
// Container_Hardware.Validate if the designated constraints aren't met.
type Container_HardwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Container_HardwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Container_HardwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Container_HardwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Container_HardwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Container_HardwareValidationError) ErrorName() string {
	return "Container_HardwareValidationError"
}

// Error satisfies the builtin error interface
func (e Container_HardwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer_Hardware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Container_HardwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Container_HardwareValidationError{}

// Validate checks the field values on Container_Settings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Container_Settings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container_Settings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Container_SettingsMultiError, or nil if none found.
func (m *Container_Settings) ValidateAll() error {
	return m.validate(true)
}

func (m *Container_Settings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Container_SettingsValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Container_SettingsValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Container_SettingsValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Container_SettingsMultiError(errors)
	}

	return nil
}

// Container_SettingsMultiError is an error wrapping multiple validation errors
// returned by Container_Settings.ValidateAll() if the designated constraints
// aren't met.
type Container_SettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Container_SettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Container_SettingsMultiError) AllErrors() []error { return m }

// Container_SettingsValidationError is the validation error returned by
// Container_Settings.Validate if the designated constraints aren't met.
type Container_SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Container_SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Container_SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Container_SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Container_SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Container_SettingsValidationError) ErrorName() string {
	return "Container_SettingsValidationError"
}

// Error satisfies the builtin error interface
func (e Container_SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer_Settings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Container_SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Container_SettingsValidationError{}

// Validate checks the field values on CreateSmerd_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSmerd_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSmerd_Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSmerd_RequestMultiError, or nil if none found.
func (m *CreateSmerd_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSmerd_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(m.GetImageName()) > 50 {
		err := CreateSmerd_RequestValidationError{
			field:  "ImageName",
			reason: "value length must be at most 50 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateSmerd_Request_ImageName_Pattern.MatchString(m.GetImageName()) {
		err := CreateSmerd_RequestValidationError{
			field:  "ImageName",
			reason: "value does not match regex pattern \"([a-z]+)/([a-z]+):([a-z0-9.]+)\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AllowDuplicates

	if m.Hardware != nil {

		if all {
			switch v := interface{}(m.GetHardware()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Hardware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Hardware",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHardware()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSmerd_RequestValidationError{
					field:  "Hardware",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Settings != nil {

		if all {
			switch v := interface{}(m.GetSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSmerd_RequestValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSmerd_RequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateSmerd_RequestMultiError(errors)
	}

	return nil
}

// CreateSmerd_RequestMultiError is an error wrapping multiple validation
// errors returned by CreateSmerd_Request.ValidateAll() if the designated
// constraints aren't met.
type CreateSmerd_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSmerd_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSmerd_RequestMultiError) AllErrors() []error { return m }

// CreateSmerd_RequestValidationError is the validation error returned by
// CreateSmerd_Request.Validate if the designated constraints aren't met.
type CreateSmerd_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSmerd_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSmerd_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSmerd_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSmerd_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSmerd_RequestValidationError) ErrorName() string {
	return "CreateSmerd_RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSmerd_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSmerd_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSmerd_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSmerd_RequestValidationError{}

var _CreateSmerd_Request_ImageName_Pattern = regexp.MustCompile("([a-z]+)/([a-z]+):([a-z0-9.]+)")

// Validate checks the field values on CreateSmerd_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSmerd_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSmerd_Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSmerd_ResponseMultiError, or nil if none found.
func (m *CreateSmerd_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSmerd_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CreateSmerd_ResponseMultiError(errors)
	}

	return nil
}

// CreateSmerd_ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSmerd_Response.ValidateAll() if the designated
// constraints aren't met.
type CreateSmerd_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSmerd_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSmerd_ResponseMultiError) AllErrors() []error { return m }

// CreateSmerd_ResponseValidationError is the validation error returned by
// CreateSmerd_Response.Validate if the designated constraints aren't met.
type CreateSmerd_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSmerd_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSmerd_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSmerd_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSmerd_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSmerd_ResponseValidationError) ErrorName() string {
	return "CreateSmerd_ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSmerd_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSmerd_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSmerd_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSmerd_ResponseValidationError{}
